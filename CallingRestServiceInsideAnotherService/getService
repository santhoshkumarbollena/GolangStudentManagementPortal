package main

import (
	
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	
	"github.com/gorilla/mux"
)

func main() {
	myRouter := mux.NewRouter().StrictSlash(true)

	myRouter.HandleFunc("/FirstService/{requestId}/{memberId}/{memberIdType}/{referedToSpecialtyCategory}/{referedToSpecialityCode}/{referedToSpecialityAreaOfBody}/{providerIds}/{searchFilterCriteria}/{callingApp}/{callingAppType}", FirstService)
	myRouter.HandleFunc("/SecondService", SecondService).Methods("POST")
	log.Fatal(http.ListenAndServe(":1000", myRouter))

}
func CallingServices(){
	
}

type Input struct {
	RequestId                     string   `json:"requestId"`
	MemberId                      string   `json:"memberId"`
	MemberIdType                  string   `json:"memberIdType"`
	ReferedToSpecialtyCategory    string   `json:"referedToSpecialtyCategory"`
	ReferedToSpecialityCode       []string `json:"referedToSpecialityCode"`
	ReferedToSpecialityAreaOfBody string   `json:"referedToSpecialityAreaOfBody"`
	ProviderIds                   []string `json:"providerIds"`
	SearchFilterCriteria          string   `json:"searchFilterCriteria"`
	CallingApp                    string   `json:"callingApp"`
	CallingAppType                string   `json:"callingAppType"`
}
type Providers struct {
	NPI            string      
	Ranking        string   
}
type Object struct {
	StatusCode     string     
	StatusMessage  string 
}
type Output struct {
	ResponseId     string      `json:"responseId"`
	Providers      []Providers `json:"providers"`
	  
	ResponseStatus Object      `json:"responseStatus"`
    
}

func FirstService(w http.ResponseWriter, r *http.Request) {

	// resp, _ := http.Get("http://localhost:10000/GetAllEmployes")
	// defer resp.Body.Close()
	// body, _ := ioutil.ReadAll(resp.Body)
	// fmt.Println(string(body))

	
vars := mux.Vars(r)
RequestId := vars["requestId"]
MemberId := vars["memberId"]
MemberIdType := vars["memberIdType"]	
ReferedToSpecialtyCategory := vars["referedToSpecialtyCategory"]

ProviderIds := vars["providerIds"]
SearchFilterCriteria := vars["searchFilterCriteria"]
CallingApp := vars["callingApp"]
CallingAppType := vars["callingAppType"]
// OutputFromSecondService := models.Output{}
// var Input models.Input
var Output Output


fmt.Println("1st Service")
fmt.Println()
// fmt.Println(Input)
fmt.Println()
//fmt.Println(Students)
//fmt.Println(string(reqBody))

if RequestId == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: "Error no RequestId | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if MemberId == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: "Error no MemberId | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if MemberIdType == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no MemberIdType | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if ReferedToSpecialtyCategory == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no ReferedToSpecialtyCategory | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if len(ProviderIds) == 0 {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no ProviderIds | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if SearchFilterCriteria == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no SearchFilterCriteria | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if CallingApp == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no CallingApp | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}
if CallingAppType == "" {
	Output.ResponseStatus = Object{StatusCode: "901", StatusMessage: " Error no CallingAppType | Passed"}
	json.NewEncoder(w).Encode((Output))
	return
}


	json.NewEncoder(w).Encode("OutputFromSecondService")
}
func SecondService(w http.ResponseWriter, r *http.Request) {
	var Output Output
	reqBody, _ := ioutil.ReadAll(r.Body)
	var Input Input
	json.Unmarshal(reqBody, &Input)
	
	fmt.Println()
	fmt.Println("2nd Service")
	fmt.Println()
	fmt.Println(Input)
	fmt.Println()
	//Setting output values in service 2
	Output.ResponseId = "1231"
	Provider := Providers{"key1","1"}
	//Object := Object{"Response Code","Response Status"}
	var ProvidersList []Providers
	ProvidersList = append(ProvidersList, Provider)
	Provider2 := Providers{"key2","2"}
	ProvidersList = append(ProvidersList, Provider2)
	Output.Providers = ProvidersList
	
	Output.ResponseStatus = Object{StatusCode:"200",StatusMessage:"sucess"}


	json.NewEncoder(w).Encode(Output)
}
